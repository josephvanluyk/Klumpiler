global

const
  maxsize   : 100;
  epsilon   : 0.00001;

type
  arraytype : array [100] of real;
  

procedure main();

dcl
  x         : arraytype;
  n         : int;
  i         : int;
  high      : real;
  low       : real;
  range     : real;
  meanx     : real;
  varx      : real;
  stdx      : real;

begin {main}
  write ('enter the number of items: ');
  readln (n);
  if (n = 0)
    then goto #1;
  writeln("");
  i := 0;
  while (i < n)
    do;
    write ('item ',i+1,': ');
    readln (x[i]);
    i := i + 1;
    end;
  writeln("");
  high := max (x,n);
  low := min (x,n);
  range := high - low;
  meanx := average (x,n);
  varx := variance (x,n,meanx);
  stdx := sqrt (varx);
  writeln ('the max is:                ',high);
  writeln ('the min is:                ',low);
  writeln ('the range is:              ',range);
  writeln ('the average is:            ',meanx);
  writeln ('the variance is:           ',varx);
  writeln ('the standard deviation is: ',stdx);
#1;
  end   {main}

procedure max(a : arraytype, n : int): real;
dcl
  loc       : int;
  i         : int;
begin {max}
  loc := 0;
  i := 1;
  while (i < n)
    do;
    if (a[i] > a[loc])
      then loc := i;
    i := i + 1;
    end;
  return a[loc];
end   {max}

procedure min(a : arraytype,n : int) : real;
dcl
  loc       : int;
  i         : int;
begin {min}
  loc := 0;
  i := 1;
  while (i < n)
    do;
    if (a[i] < a[loc])
      then loc := i;
    i := i + 1;
    end;
  return a[loc];
end   {min}

procedure average(a : arraytype,n : int) : real;
dcl
  sum : real;
  i : int;
begin {mean}
  i := 0;
  while (i < n)
    do;
    sum := sum + a[i];
    i := i + 1;
    end;
  return sum / n;
end   {mean}

procedure variance(a : arraytype,n : int,mean : real) : real;
dcl
  sum       : real;
  i         : int;
begin {var}
  i := 0;
  while (i < n)
    do;
    sum := sum + square(a[i]-mean);
    i := i + 1;
    end;
  return sum / n;
end   {var}

procedure abs(x : real) : real;
begin {abs}
  if (x >= 0)
    then return x;
    else return -x;
end   {abs}

procedure square(x : real) : real;
begin {square}
  return x*x;
end   {square}

procedure sqrt(x : real) : real;
dcl
  guess     : real;
  newguess  : real;
begin {sqrt}
  if (x = 0.0)
    then return x;
  guess := 1.0;
  newguess := 0.5 * (guess + x/guess);
  while (abs(newguess - guess) > epsilon)
  do;
    guess := newguess;
    newguess := 0.5 * (guess + x/guess);
  end;
  return newguess;
end   {sqrt}
.
